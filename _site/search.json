[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas Reinke",
    "section": "",
    "text": "Thomas Reinke is a PhD student studying statistics at Baylor University."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Thomas Reinke",
    "section": "Education",
    "text": "Education\nSamford University | Birmingham, AL BS in Mathematics | Aug 2019 - May 2023"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Thomas Reinke",
    "section": "Experience",
    "text": "Experience\nBlue Cross and Blue Shield of Alabama | Healthcare Analytics Intern | June 2022 - Aug 2022\nAutoTec | Data Analyst Intern | Feb 2022 - Apr 2022"
  },
  {
    "objectID": "index.html#languages-software",
    "href": "index.html#languages-software",
    "title": "Thomas Reinke",
    "section": "Languages & Software",
    "text": "Languages & Software\nR/Rstudio, Git/Github, Docker, SQL, Python, Java, AWS, Tableau, Toad"
  },
  {
    "objectID": "art.html",
    "href": "art.html",
    "title": "Art",
    "section": "",
    "text": "Code\nmake_df &lt;- \\(n = 6) {\n  expand.grid(x = seq(0, 1, length.out = n),\n         y = seq(0, 1, length.out = n)) |&gt;\n    tibble(\n      color = sample(1:6, n^2, replace = TRUE),\n      stroke = sample(5:9, n^2, replace = TRUE),\n      shape = sample(c(7:10, 12:13), n^2, replace = TRUE)\n    )\n}\n\ndraw &lt;- \\(seed = 1) {\n  set.seed(seed)\n  make_df() |&gt;\n    ggplot(aes(\n      x = x,\n      y = y,\n      color = factor(color)\n    )) +\n    geom_point(aes(\n      size = 1,\n      stroke = stroke,\n      shape = factor(shape)\n    ), show.legend = F) +\n    coord_cartesian(xlim = c(-.25, 1.25), ylim = c(-.25, 1.25)) +\n    scale_color_brewer(palette = \"Set1\")\n}\n\n#map(1:5, draw)\ndraw(5)\n\n\n\n\n\n\n\n\nFigure 1: Simple Shape Art\n\n\n\n\n\n\n\nCode\ntribble(\n  ~x,  ~y,  ~color,  ~size,  ~shape,  ~stroke,\n  -1,   1,  \"left\",    20,        8,       10, \n  1,    1, \"right\",    25,       10,       10,\n  0, -1.5, \"mouth\",    25,        9,       10,\n  0,    0,  \"nose\",    15,        2,       10     \n) |&gt;\n  ggplot() +\n  geom_point(aes(\n    x = x,\n    y = y,\n    color = color,\n    size = size,\n    shape = shape,\n    stroke = stroke\n  ),\n  show.legend = FALSE) +\n  scale_size_identity() +\n  scale_shape_identity() +\n  scale_color_brewer(palette = \"Pastel1\") + \n  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))\n\n\n\n\n\n\n\n\nFigure 2: Simple Shape Face\n\n\n\n\n\n\n\n\nDelaunay Triangulation\n\n\nCode\ndel_df &lt;- \\(n = 10){\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble( \n      fill = sample(letters[1:3], n^2, replace = TRUE)\n    )\n}\n\ndel_df() |&gt;\n  ggplot(aes(x, y)) +\n  ggforce::geom_delaunay_segment2(\n    aes(color = fill, group = -1),\n    linewidth = 2,\n    lineend = \"round\",\n    show.legend = FALSE\n  )\n\n\n\n\n\n\n\n\nFigure 3: Grid Delaunay\n\n\n\n\n\n\n\nCode\ndel_df2 &lt;- \\(n = 50, groups = 3, prob = NULL){\n  tibble(\n  x = sample(1:n, size = n %/% 2, prob = prob),\n  y = sample(1:n, size = n %/% 2, prob = prob),\n  fill = sample(letters[1:groups], size = n %/% 2, replace = TRUE)\n  )\n}\n\nmake_del2 &lt;- \\(seed = 1) {\n  set.seed(seed)\n  del_df2() |&gt;\n    ggplot(aes(x, y)) +\n    ggforce::geom_delaunay_segment2(\n      aes(color = fill, group = -1),\n      size = 2,\n      lineend = \"round\",\n      show.legend = FALSE\n    )\n}\n\nmake_del2(2)\n\n\n\n\n\n\n\n\nFigure 4: Random Delaunay\n\n\n\n\n\n\n\n\nVoronoi Diagram\n\n\nCode\nvor_df &lt;- \\(n = 50, groups = 3, prob = NULL) {\n  tibble(\n    x = sample(1:n, size = n %/% 2, prob = prob),\n    y = sample(1:n, size = n %/% 2, prob = prob),\n    fill = sample(letters[1:groups], size = n %/% 2, replace = TRUE)\n  )\n}\n\nmake_vor &lt;- \\(seed = 1) {\n  set.seed(seed)\n  vor_df() |&gt;\n    ggplot(aes(x, y, group = -1L)) +\n    ggforce::geom_voronoi_tile(aes(fill = fill), show.legend = FALSE) +\n    ggforce::geom_voronoi_segment(color = background)\n}\n\nmake_vor(1)\n\n\n\n\n\n\n\n\nFigure 5: Simple Voronoi Diagram\n\n\n\n\n\n\n\n\n\n\nCode\nplan(multisession)\n\ndraw &lt;- \\(n = 1001, fill = 1:n^2, interpolate = TRUE) {\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble(fill = eval(fill)) |&gt;\n    ggplot(aes(x, y)) +\n    geom_raster(aes(fill = factor(fill)),\n                interpolate = interpolate,\n                show.legend = FALSE) +\n    scale_fill_viridis_d(option = \"turbo\") +\n    coord_equal()\n}\n\nc(\n  quote(1:n ^ 2),\n  quote(x + y),\n  quote(x * y),\n  quote(x / y),\n  quote(func(c(1:n ^ 2)))\n) |&gt;\n  future_map(.f = \\(fi) draw(fill = fi))\n\n\n\n\n\n\n\n\nFigure 6: Fill is sequential from 1 to \\(n^2\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Fill is sum \\(x + y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Fill is product \\(x \\times y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Fill is quotient \\(x / y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Fill is permuted sequence from 1 to \\(n^2\\)\n\n\n\n\n\n\n\n\n\n\nCode\nplan(multisession)\n\ndraw &lt;- \\(n = 1001, fill = 1:n^2, interpolate = TRUE) {\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble(fill = eval(fill)) |&gt;\n    ggplot(aes(x, y)) +\n    geom_raster(aes(fill = factor(fill)),\n                interpolate = interpolate,\n                show.legend = FALSE) +\n    scale_fill_viridis_d(option = \"turbo\") +\n    coord_equal()\n}\n\nc(\n  quote(rbeta(n^2, x, y)),\n  quote(rweibull(n^2, x, y)),\n  quote(rnorm(n^2, x, y))\n) |&gt;\n  future_map(.f = \\(fi) draw(fill = fi, interpolate = FALSE))\n\n\n\n\n\nFill is \\(\\text{beta}(x,y)\\)\n\n\n\n\n\n\n\nFill is \\(\\text{weibull}(x,y)\\)\n\n\n\n\n\n\n\nFill is \\(N(x, y)\\)\n\n\n\n\n\n\n\n\n\nCode\np_df &lt;- \\(n = 25, groups = 5, prob = NULL) {\n  tibble(\n    x = sample(1:(n * 2), size = n, prob = prob),\n    y = sample(1:(n * 2), size = n, prob = prob),\n    fill = sample(letters[1:groups], size = n, replace = TRUE),\n    size = sample(30:50, size = n, replace = TRUE)\n  )\n}\n\nbubbles &lt;- \\(seed = 1, number_of_bubbles = 25) {\n  set.seed(seed)\n  p_df(number_of_bubbles) |&gt;\n    ggplot(aes(x, y)) +\n    geom_point(\n      aes(\n        fill = fill,\n        color = fill,\n        size = size\n      ),\n      stroke = .1,\n      shape = 21,\n      alpha = .35,\n      show.legend = FALSE\n    ) +\n    scale_size_identity()\n}\n\nbubbles(seed = 5)\n\n\n\n\n\n\n\n\nFigure 11: Randomly placed, colored, and sized bubbles\n\n\n\n\n\n\n\n\n\n\nCode\ncircles2 &lt;- \\(seed = 1, nrows = 3, ncols = 3) {\n  set.seed(seed)\n  expand.grid(x = 1, y = 1) |&gt;\n    tibble(id = 1:(ncols * nrows)) |&gt;\n    mutate(row = rep(1:3, each = 3), col = rep(1:3, 3)) |&gt;\n    rowwise() |&gt;\n    mutate(\n      x_s = x + runif(1, min = -.5, max = .5),\n      y_s = y + runif(1, min = -.5, max = .5)\n    ) |&gt;\n    pivot_longer(cols = c(x, x_s),\n                 names_to = \"xgrp\",\n                 values_to = \"x\") |&gt;\n    pivot_longer(cols = c(y, y_s),\n                 names_to = \"ygrp\",\n                 values_to = \"y\") |&gt;\n    dplyr::filter((xgrp == \"x\" &\n                     ygrp == \"y\") | (xgrp == \"x_s\" & ygrp == \"y_s\")) |&gt;\n    mutate(color = sample(\n      c(\"#6497b1\", \"#6a359c\", \"#FFB04F\", \"#679c35\", \"#cd1076\"),\n      18,\n      replace = TRUE\n    )) |&gt;\n    ggplot(aes(\n      x = x,\n      y = y,\n      color = factor(color)\n    )) +\n    geom_point(size = 35,\n               show.legend = FALSE,\n               alpha = .5) +\n    facet_grid(rows = vars(row),\n               cols = vars(col),\n               margins = FALSE) +\n    lims(x = c(-.5, 2.5), y = c(-.5, 2.5)) +\n    theme(strip.text = element_blank())\n}\n\ncircles2(7)\n\n\n\n\n\n\n\n\nFigure 12: Paired overlapping circles"
  },
  {
    "objectID": "art.html#shapes",
    "href": "art.html#shapes",
    "title": "Art",
    "section": "",
    "text": "Code\nmake_df &lt;- \\(n = 6) {\n  expand.grid(x = seq(0, 1, length.out = n),\n         y = seq(0, 1, length.out = n)) |&gt;\n    tibble(\n      color = sample(1:6, n^2, replace = TRUE),\n      stroke = sample(5:9, n^2, replace = TRUE),\n      shape = sample(c(7:10, 12:13), n^2, replace = TRUE)\n    )\n}\n\ndraw &lt;- \\(seed = 1) {\n  set.seed(seed)\n  make_df() |&gt;\n    ggplot(aes(\n      x = x,\n      y = y,\n      color = factor(color)\n    )) +\n    geom_point(aes(\n      size = 1,\n      stroke = stroke,\n      shape = factor(shape)\n    ), show.legend = F) +\n    coord_cartesian(xlim = c(-.25, 1.25), ylim = c(-.25, 1.25)) +\n    scale_color_brewer(palette = \"Set1\")\n}\n\n#map(1:5, draw)\ndraw(5)\n\n\n\n\n\n\n\n\nFigure 1: Simple Shape Art\n\n\n\n\n\n\n\nCode\ntribble(\n  ~x,  ~y,  ~color,  ~size,  ~shape,  ~stroke,\n  -1,   1,  \"left\",    20,        8,       10, \n  1,    1, \"right\",    25,       10,       10,\n  0, -1.5, \"mouth\",    25,        9,       10,\n  0,    0,  \"nose\",    15,        2,       10     \n) |&gt;\n  ggplot() +\n  geom_point(aes(\n    x = x,\n    y = y,\n    color = color,\n    size = size,\n    shape = shape,\n    stroke = stroke\n  ),\n  show.legend = FALSE) +\n  scale_size_identity() +\n  scale_shape_identity() +\n  scale_color_brewer(palette = \"Pastel1\") + \n  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))\n\n\n\n\n\n\n\n\nFigure 2: Simple Shape Face"
  },
  {
    "objectID": "art.html#delaunay",
    "href": "art.html#delaunay",
    "title": "Art",
    "section": "",
    "text": "Delaunay Triangulation\n\n\nCode\ndel_df &lt;- \\(n = 10){\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble( \n      fill = sample(letters[1:3], n^2, replace = TRUE)\n    )\n}\n\ndel_df() |&gt;\n  ggplot(aes(x, y)) +\n  ggforce::geom_delaunay_segment2(\n    aes(color = fill, group = -1),\n    linewidth = 2,\n    lineend = \"round\",\n    show.legend = FALSE\n  )\n\n\n\n\n\n\n\n\nFigure 3: Grid Delaunay\n\n\n\n\n\n\n\nCode\ndel_df2 &lt;- \\(n = 50, groups = 3, prob = NULL){\n  tibble(\n  x = sample(1:n, size = n %/% 2, prob = prob),\n  y = sample(1:n, size = n %/% 2, prob = prob),\n  fill = sample(letters[1:groups], size = n %/% 2, replace = TRUE)\n  )\n}\n\nmake_del2 &lt;- \\(seed = 1) {\n  set.seed(seed)\n  del_df2() |&gt;\n    ggplot(aes(x, y)) +\n    ggforce::geom_delaunay_segment2(\n      aes(color = fill, group = -1),\n      size = 2,\n      lineend = \"round\",\n      show.legend = FALSE\n    )\n}\n\nmake_del2(2)\n\n\n\n\n\n\n\n\nFigure 4: Random Delaunay"
  },
  {
    "objectID": "art.html#voronoi",
    "href": "art.html#voronoi",
    "title": "Art",
    "section": "",
    "text": "Voronoi Diagram\n\n\nCode\nvor_df &lt;- \\(n = 50, groups = 3, prob = NULL) {\n  tibble(\n    x = sample(1:n, size = n %/% 2, prob = prob),\n    y = sample(1:n, size = n %/% 2, prob = prob),\n    fill = sample(letters[1:groups], size = n %/% 2, replace = TRUE)\n  )\n}\n\nmake_vor &lt;- \\(seed = 1) {\n  set.seed(seed)\n  vor_df() |&gt;\n    ggplot(aes(x, y, group = -1L)) +\n    ggforce::geom_voronoi_tile(aes(fill = fill), show.legend = FALSE) +\n    ggforce::geom_voronoi_segment(color = background)\n}\n\nmake_vor(1)\n\n\n\n\n\n\n\n\nFigure 5: Simple Voronoi Diagram"
  },
  {
    "objectID": "art.html#raster",
    "href": "art.html#raster",
    "title": "Art",
    "section": "",
    "text": "Code\nplan(multisession)\n\ndraw &lt;- \\(n = 1001, fill = 1:n^2, interpolate = TRUE) {\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble(fill = eval(fill)) |&gt;\n    ggplot(aes(x, y)) +\n    geom_raster(aes(fill = factor(fill)),\n                interpolate = interpolate,\n                show.legend = FALSE) +\n    scale_fill_viridis_d(option = \"turbo\") +\n    coord_equal()\n}\n\nc(\n  quote(1:n ^ 2),\n  quote(x + y),\n  quote(x * y),\n  quote(x / y),\n  quote(func(c(1:n ^ 2)))\n) |&gt;\n  future_map(.f = \\(fi) draw(fill = fi))\n\n\n\n\n\n\n\n\nFigure 6: Fill is sequential from 1 to \\(n^2\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Fill is sum \\(x + y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Fill is product \\(x \\times y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Fill is quotient \\(x / y\\)\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Fill is permuted sequence from 1 to \\(n^2\\)"
  },
  {
    "objectID": "art.html#raster-with-distribution-fill",
    "href": "art.html#raster-with-distribution-fill",
    "title": "Art",
    "section": "",
    "text": "Code\nplan(multisession)\n\ndraw &lt;- \\(n = 1001, fill = 1:n^2, interpolate = TRUE) {\n  expand.grid(x = seq(0, 1, length.out = n),\n              y = seq(0, 1, length.out = n)) |&gt;\n    tibble(fill = eval(fill)) |&gt;\n    ggplot(aes(x, y)) +\n    geom_raster(aes(fill = factor(fill)),\n                interpolate = interpolate,\n                show.legend = FALSE) +\n    scale_fill_viridis_d(option = \"turbo\") +\n    coord_equal()\n}\n\nc(\n  quote(rbeta(n^2, x, y)),\n  quote(rweibull(n^2, x, y)),\n  quote(rnorm(n^2, x, y))\n) |&gt;\n  future_map(.f = \\(fi) draw(fill = fi, interpolate = FALSE))\n\n\n\n\n\nFill is \\(\\text{beta}(x,y)\\)\n\n\n\n\n\n\n\nFill is \\(\\text{weibull}(x,y)\\)\n\n\n\n\n\n\n\nFill is \\(N(x, y)\\)"
  },
  {
    "objectID": "art.html#bubbles",
    "href": "art.html#bubbles",
    "title": "Art",
    "section": "",
    "text": "Code\np_df &lt;- \\(n = 25, groups = 5, prob = NULL) {\n  tibble(\n    x = sample(1:(n * 2), size = n, prob = prob),\n    y = sample(1:(n * 2), size = n, prob = prob),\n    fill = sample(letters[1:groups], size = n, replace = TRUE),\n    size = sample(30:50, size = n, replace = TRUE)\n  )\n}\n\nbubbles &lt;- \\(seed = 1, number_of_bubbles = 25) {\n  set.seed(seed)\n  p_df(number_of_bubbles) |&gt;\n    ggplot(aes(x, y)) +\n    geom_point(\n      aes(\n        fill = fill,\n        color = fill,\n        size = size\n      ),\n      stroke = .1,\n      shape = 21,\n      alpha = .35,\n      show.legend = FALSE\n    ) +\n    scale_size_identity()\n}\n\nbubbles(seed = 5)\n\n\n\n\n\n\n\n\nFigure 11: Randomly placed, colored, and sized bubbles"
  },
  {
    "objectID": "art.html#circles",
    "href": "art.html#circles",
    "title": "Art",
    "section": "",
    "text": "Code\ncircles2 &lt;- \\(seed = 1, nrows = 3, ncols = 3) {\n  set.seed(seed)\n  expand.grid(x = 1, y = 1) |&gt;\n    tibble(id = 1:(ncols * nrows)) |&gt;\n    mutate(row = rep(1:3, each = 3), col = rep(1:3, 3)) |&gt;\n    rowwise() |&gt;\n    mutate(\n      x_s = x + runif(1, min = -.5, max = .5),\n      y_s = y + runif(1, min = -.5, max = .5)\n    ) |&gt;\n    pivot_longer(cols = c(x, x_s),\n                 names_to = \"xgrp\",\n                 values_to = \"x\") |&gt;\n    pivot_longer(cols = c(y, y_s),\n                 names_to = \"ygrp\",\n                 values_to = \"y\") |&gt;\n    dplyr::filter((xgrp == \"x\" &\n                     ygrp == \"y\") | (xgrp == \"x_s\" & ygrp == \"y_s\")) |&gt;\n    mutate(color = sample(\n      c(\"#6497b1\", \"#6a359c\", \"#FFB04F\", \"#679c35\", \"#cd1076\"),\n      18,\n      replace = TRUE\n    )) |&gt;\n    ggplot(aes(\n      x = x,\n      y = y,\n      color = factor(color)\n    )) +\n    geom_point(size = 35,\n               show.legend = FALSE,\n               alpha = .5) +\n    facet_grid(rows = vars(row),\n               cols = vars(col),\n               margins = FALSE) +\n    lims(x = c(-.5, 2.5), y = c(-.5, 2.5)) +\n    theme(strip.text = element_blank())\n}\n\ncircles2(7)\n\n\n\n\n\n\n\n\nFigure 12: Paired overlapping circles"
  }
]